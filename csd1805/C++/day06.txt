回顾：
1 this指针
1）区分作用域
2）返回调用对象自身
3）销毁对象自身
4）作用实参，实现对象之间交互

2 常成员函数
  返回类型 函数名(形参表) const {...}
  1）正常不能在常函数中修改成员变量
  2）mutable修饰的成员变量可以在常函数中修改
  3）常对象只能调用常函数
  4）函数名和形参表相同的成员函数，常版本和非常版本可以重载。
  
3 析构函数
  ~类名(void){清理对象的动态资源}
4 对象的创建和销毁
创建：
	分配内存->构造成员子对象->执行构造函数代码
销毁：
	执行析构函数代码->析构成员子对象->释放内存
	
-----------------------------------	
十七 拷贝构造和拷贝赋值
1 浅拷贝和深拷贝
1)如果一个类中包含指针形式的成员变量，缺省的拷贝构造函数只是复制指针变量本身，而没有复制该指针所指向的内容，这种拷贝方式称为浅拷贝.
2）浅拷贝将导致不同对象之间的数据共享，如果数据在堆区，析构时还可能发生"double free",导致进程的终止，这时需要定义一个支持复制指针指向内容的拷贝构造函数，即深拷贝。

2 拷贝赋值
1）当两个对象进行赋值操作时，比如"i3=i2"，编译器会将其翻译成 i3.operator=(i2)成员函数调用形式，其中“operator=”称为拷贝赋值操作符函数，通过它实现两个对象的赋值操作，该函数的返回结果就是表达式的结果
2）但是编译器缺省提供的拷贝赋值函数和缺省的拷贝构造函数类似，也是浅拷贝，只是复制了指针变量本身，没有复制指针所指向的内容，有“double free”和
内存泄漏的错误。
3）为了得到深拷贝的效果，避免错误，必须自己定义一个支持深拷贝的拷贝赋值函数：
	类名& operator=(const 类名& that){
		if(&that != this){//防止自赋值
			释放旧内存;
			分配新内存;
			拷贝新数据;
		}
		return *this;//返回自引用
	}
	this指向调用对象(左操作数)
	that对应参数对象(右操作数)
	
笔试题：实现String类
  class String{
  public:
  		//构造函数
  		//析构函数
  		//拷贝构造
  		//拷贝赋值
  private:
  		char* m_str;
  };
---------------------
十八 静态成员(static)
1 静态成员变量
  class 类名{
  		static 数据类型 变量;//声明
  };
  数据类型 类名::变量 = 初值;//定义和初始化
  1）普通成员变量属于对象，而静态成员变量不属于对象。
  2）静态成员变量和全局变量类似，内存在全局区，可以把静态成员变量理解为被限制在类中使用的全局变量。
  3）使用
  类名::静态成员变量;//推荐
  对象.静态成员变量;//和上面等价

2 静态成员函数
  class 类名{
  		static 返回类型 函数名(形参表){...}	
  };
  1）静态成员函数没有this指针,也没有常属性
  2）使用
  类名::静态成员函数(实参表);//推荐
  对象.静态成员函数(实参表);//和上面等价
  
  注：在静态成员函数中只能访问静态成员，不能访问非静态成员；在非静态成员函数中既可以访问静态成员也可以访问非静态成员.
	
3 单例模式
概念：
	一个类只允许存在唯一的对象，并提供它的访问方法。
创建思路：
	1）禁止在类的外部创建对象：私有化构造函数
	2）类的内部维护唯一的对象: 静态成员变量
	3）提供单例对象的访问方法：静态成员函数
创建方式：
	1）饿汉式：无论用或不用，程序启动即创建
	2）懒汉式：用时在创建，不用即销毁
	
十九 成员指针//了解
1 成员变量指针
1）定义
  类型 类名::*成员指针变量名 = &类名::成员变量;
2)使用
	对象.*成员指针变量名;
	对象指针->*成员指针变量名;

2 成员函数指针
1）定义
	返回类型 (类名::*成员函数指针)(形参表) 
		= &类名::成员函数名;
2）使用
	(对象.*成员函数指针)(实参表)
	(对象->*成员函数指针)(实参表)

注：
  “.*”称为直接成员解引用操作符
  “->*”称为间接成员解引用操作符
  
练习：复习String类实现、单例模式

扩展练习 V4.0：继续完善企业员工类
需求：
	1）禁止拷贝构造和拷贝赋值
	2）创建对象时，从指定的文件中读取id并初始化员工号，保存ID不重复。
	3）增加静态成员变量保存员工人数，并将人数信息写入文件。
	4）增加静态成员函数获取员工人数