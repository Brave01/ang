回顾：
1 bool类型 true/false
2 操作符别名
3 C++的函数
1）函数重载
   相同作用域 相同函数名 不同参数
   原理:函数换名，extern "C"
2）缺省参数
	void func(int a,int b=缺省值);
3）哑元参数
	void func(int/*哑元*/){...}
4）内联函数(inline)

4 动态内存分配
1）new/new[]操作符分配内存
2）delete/delete[]操作符释放内存

5 引用(reference)
1)引用即别名
	类型 & 引用别名 = 变量;
2)常引用(万能引用)
3)关于左值和右值
4)引用型函数参数
	void func(const int& a){}
	int main(void){
		int num = 100;
		func(num);
	}
=============================
今天：
十 引用（Reference）
...
5 引用型函数返回值
1）可以将函数返回值声明为引用，避免函数返回值所带来的开销。
2）如果函数返回引用，那么该函数返回结果可能是一个左值。
注：不要从函数中返回局部变量的引用，因为所引用的内存会在函数返回以后被释放，但是可以返回成员变量、静态变量、全局变量的引用。
	int& func(void){
		static int i = 123;
		return i;
	}
	int main(void){
		int& r = func();//ok
		func() = 321;//ok
	}
	
4 引用和指针
1）从C的角度去看引用，其本质就是指针，但是建立多使用引用少使用指针。
	int a = 100；
	int& ra = a;//ra引用a
	int* const pa = &a;//pa指向a
	ra <=等价=> *pa
2）指针可以不做初始化，其目标可以修改(指针常量除外)；而引用必须初始化，而且一旦初始化其引用目标不能再改变。
eg:
	int a=3,b=5;
	int* p;//ok
	p = &a;//p指向a
	p = &b;//p指向b
	--------------
	int& r;//error
	int& r = a;
	r = b;//ok,不是修改引用目标，只是赋值操作

//后面内容了解
3）可以定义指针的指针(二级指针)，但是不能定义引用的指针。
eg：
	int a = 100；
	int* p = &a;
	int** pp = &p;//ok,二级指针
	----------------
	int& r = a;
	int&* pr = &r;//error
	-----------------
	int* pr = &r;//ok,就是普通指针，不能叫引用的指针
	
4）可以定义指针的引用(指针变量的别名)，但是不能引用的引用。
	int a = 100;
	int* p = &a;
	int*& rp = p;//ok,指针的引用
	--------------------------
	int& r = a;
	int&& rr = r;//error
	------------------------
	int& rr = r;//ok,普通的引用，不能叫引用的引用
5）可以定义指针数组，但是不能定义引用数组
	int a=10,b=20,c=30;
	int* parr[3] = {&a,&b,&c};//ok,指针数组
	int& rarr[3] = {a,b,c};//error
6）可以定义数组的引用(数组的别名)
	int arr[3] = {10,20,30};
	int (&rarr)[3] = arr;//ok,数组的引用

7)和函数指针类似，也可以定义函数引用，其语法形式和函数指针一致。
	void func(int a){...}
	int main(void){
		void (*pf)(int) = func;
		pf(123);
		void (&rf)(int) = func;//函数引用
		rf(123);
	}

十一 类型转换
1 隐式类型转换
  char c = 'A';
  int i = c;//隐式
  -------------
  void func(int i){..}
  func(c);//隐式
  -------------
  int func(void){
  		char c = 'A';
  		return c;//隐式
  }
2 显式类型转换
2.1 C++兼容C中强制转换
	char c = 'A';
	int i = (int)c;//C风格强制转换
	int i = int(c);//C++风格强制转换

2.2 增加了四种操作符形式显式转换
1）静态类型转换
语法形式：
	目标类型变量 = 
		static_cast<目标类型>(源类型变量);
使用场景：
	用于将void*转换为其它类型的指针
	int a=100;
	void* pv = &a;
	int* pi = static_cast<int*>(pv);
2）动态类型转换(后面讲)
3）常类型转换
语法形式：
	目标类型变量 = 
		const_cast<目标类型>(源类型变量);
使用场景：
	用于去除一个指针或引用的常属性

4）重解释类型转换
语法形式：
	目标类型变量 = 
		reinterpret_cast<目标类型>(源类型变量);
使用场景：
	--》任意类型指针或引用之间转换
	--》在指针和整型数之间转换
	eg:向物理内存0x12345678存放数据123？
	int* paddr = 
		reinterpret_cast<int*>(0x12345678);
	*paddr = 123;

小结：C++之父给C程序员建议
1 慎用宏，使用const、inline、enum替换
#define PAI 3.14
--> const double PAI = 3.14;
#define max(a,b) ((a)>(b) ? (a):(b))
--> inline int max(int a,int b){
		return a>b ? a:b;
	 }
#define STATE_SLEEP 	0
#define STATE_RUN		1
#define STATE_STOP	2
--> enum STATE{SLEEP,RUN,STOP};
2 变量随用随声明同时初始化
3 尽量使用new/delete替换malloc/free	
4 少用void*、指针计算、联合体和强制转换	
5 尽量使用string表示字符串，少用C风格char*

==========================================
十二 类和对象//了解
1 什么是对象
  万物皆对象，任何一种事物都可以看做是对象.

2 如何描述对象
  通过对象的属性(名词、数量词、形容词)和行为(动词)来描述对象。
  eg：描述冰箱对象
  属性：品牌、容量、颜色、功耗..
  行为：冷冻、冷藏、装东西

3 面向对象编程
  对自然世界中对象的观察引入到编程实践的一种理念和方法，这种方法称为“数据抽象”，即在描述对象时把细节的东西剥离出去，只考虑一般性的，有规律性的，统一性的东西。
 
4 什么是类
  类是将多个对象的共性提取出来定义的一种新的数据类型，是对 对象属性和行为的抽象描述。

现实世界				 类					编程世界
具体对象--抽象-->属性/行为--实例化-->具体对象

十三 类的定义和实例化
1 类的的语法形式
  struct/class  类名:继承方式 基类{
  访问控制限定符:
  		类名(形参表):初始化表{...}//构造函数
  		~类名(void){...}	//析构函数
  		返回类型 函数名(形参表){} //成员函数
  		数据类型 变量名;//成员变量
  };
2 访问控制限定符：影响类中成员的访问位置
1）public,公有成员,在任何位置都可以访问
2）private,私有成员,只有类的内部才能访问
3）protected,保护成员(后面讲)
eg:
	struct/class XX{
		aa;//公有、私有
	public:
		bb;//公有成员
	private:
		cc;//私有成员
	public:
		dd;//公有成员
		ee;//公有成员
	};
	注：class定义类默认的访问控制属性是private，struct定义类默认的访问控制属性是public.
  
练习：复习当天内容

扩展练习V1.0：《企业员工系统》
需求：实现表示企业员工类
	1）属性：工号、姓名、基本工资
	2）行为：打印员工信息、计算工资
	3）工号>10000,姓名小于20字符,基本工资>0
提示：
	class Employee{
		成员函数：打印员工信息、计算工资
		成员变量：工号、姓名、薪资
	}；
	工资计算方法：基本工资+绩效工资
	基本工资：基本工资*出勤率(输入出勤天数/23.0)
	绩效工资：基本工资/2
		

