回顾：
1 拷贝构造和拷贝赋值
1）浅拷贝和深拷贝
2）拷贝赋值操作符函数
	a = b;//a.operator=(b)

2 静态成员
1）静态成员变量，全局区
2）静态成员函数，没有this指针

3 单例模式
1）私有化构造函数
2）静态成员变量维护唯一的对象
3）用静态成员函数获取唯一的对象

创建方式：
1）饿汉式
2）懒汉式

4 成员指针//了解
----------------------------

二十 操作符重载
eg: 复数"x+yi"
	 (1+2i) + (3+4i) = (4+6i)
1 双目操作符重载 L#R
1.1 计算类的双目操作符：+ - 
--》表达式的结果是右值
--》左右操作数既可以是左值也可以是右值
--》两种实现方式：
	1）成员函数形式（左调右参）
	L#R的表达式可以被编译器处理成L.operator#(R)的成员函数调用形式，该函数的返回值就是表达式的结果。
	2）全局函数形式（左右操作数都做为参数）
	L#R的表达式也可以被处理成::operator#(L,R)的全局函数调用形式，该函数的返回值就是表达式的结果。
	注：使用friend关键字，可以把一个全局函数声明为某个类的友元，友元函数可以访问类中的任何成员.

1.2 赋值类的双目操作符：+= -=
--》表达式结果是左值，就是左操作数的自身
--》左操作数一定是左值，右操作数可以是左值也可以是右值
--》两种实现方式：
	1）成员函数形式
	L#R ==> L.operator#(R)
	2）全局函数形式
	L#R ==> ::operator#(L,R)

2 单目操作符重载 #O
2.1 计算类单目操作符：-(取负) ~
--》表达式结果是右值，不能对表达式进行赋值操作
--》操作数只有一个，可以左值也可以是右值
--》两种实现形式
 	1）成员函数形式
		#O ==> O.operator#();
	2）全局函数形式
		#O ==> ::operator#(O);

2.2 自增减单目操作符: ++ --
1）前++、--
--》表达式的结果是左值，就是操作数自身
--》操作数一定是左值
--》两种实现形式
 	成员函数形式:#O ==> O.operator#();
	全局函数形式:#O ==> ::operator#(O);
2）后++、--
--》表达式的结果是右值，是操作数自增减前的副本
--》操作数也一定是左值
--》两种实现形式
 	成员函数形式:O# ==> O.operator#(int);
	全局函数形式:O# ==> ::operator#(O,int);
	注：后缀自增减操作符函数中增加了一个int哑元参数，用于和前缀自增减进行区分.

3 插入(输出)和提取(输入)操作符: << >>
功能：实现自定义类型直接的输入和输出
注：只能使用全局函数形式(friend)
  #include <iostream>
  -->ostream cout;
  -->istream cin;

  friend ostream& operator<<(
  		ostream& os,const RIGHT& right){...}
  friend istream& operator>>(
  		istream& is,RIGHT& right){...}

  //全局函数：operator<<(cout,a)
  cout << a;
  cout << c << ...
  //全局函数：operator>>(cin,a)
  cin >> a;
  cin >> c << ...

4 下标操作符 []
功能：让一个对象可以像数组一样去使用
注：非常对象返回左值，常对象返回右值
	string s = "hello";
	s[0] = 'H';//s.operator[](0) = 'H'; 
	const string s2 = "hello";
	s2[0] = 'H';//error
	
5 函数操作符 ()
功能：让对象像函数一样去使用
注：对参数个数、类型和返回值类型没有限制。
	class A{};
	A a;
	a(10,1.23);//a.operator()(10,1.23);	

6 new/delete 操作数//了解
  static void* operator new(size_t size){..}
  static void operator delete(void *p){..}
  
练习：实现3*3矩阵类，支持如下操作符重载
	   + - += -= -(负) 前后++/-- <<
提示：
	class M33{
	public:
		M33(void){
			for(int i=0;i<3;i++)
				for(int j=0;i<3;j++)
					m_a[i][j] = 0;
		}
		M33(int a[][3]){
			for(int i=0;i<3;i++)
				for(int j=0;i<3;j++)
					m_a[i][j] = a[i][j];
		}
		friend ostream& operator<<(
  			ostream& os,const M33& m){
  			for(int i=0;i<3;i++){
				for(int j=0;i<3;j++)
					os << m.m_a[i][j] << ' ';
				os << endl
			}
			return os;
  		}
	private:
		int m_a[3][3];	
	};  
	int a1[3][3] = {1,2,3,4,5,6,7,8,9};
	M33 m1(a1);
	int a2[3][3] = {9,8,7,6,5,4,3,2,1};
	M33 m2(a2); 
	
	cout << m1 << endl;
	1 2 3
	4 5 6
	7 8 9
	
	m1+m2:
	1 2 3		9 8 7   10 10 10
	4 5 6	 + 6 5 4 = 10 10 10
	7 8 9		3 2 1   10 10 10

扩展练习V5.0：继续完善企业员工类
需求：
	1）支持插入(输出)操作符，实现打印员工信息
	2）支持比较操作符 ==  !=，根据员工ID号比较两个对象是否一样。
	
	Employee emp1(..);
	Employee emp2(..);
	
	//if(emp1.operator==(emp2))
	if(emp1 == emp2){}
	if(emp1 != emp2){}
	
	





