回顾：
1 常用SQL语句
CREARE TABLE 表名 (列名 类型 约束,...);
DROP TABLE 表名;
INSERT INTO 表名 (列名,...) VALUES(数值,...);
DELETE FROM 表名 WHERE 条件;
UPDATE 表名 SET 列名=新数值 WHERE 条件;
SELECT 列名,... FROM 表名
		WHERE 条件 ORDER BY 列名 ASC/DESC;
2 QT使用数据库(SQLITE)
1）建立和数据库连接(添加数据库驱动)
  	QSqlDatabase db = 
  		QSqlDatabase::addDatabase("QSQLITE");
2）设置数据库名字
	db.setDatabaseName("student.db");
3）打开数据库
	db.open()
4）数据库操作符
--》QSqlQuery query(db);
	 query.exec("SQL语句字符串");
--》QSqlQueryModel model;
	 model.setQuery("SELECT语句");
=====================================
一 QT多线程(QThread)
1 创建线程
1）方法1：moveToThread
//希望把Worker类中槽函数doWork放到独立线程中执行
class Worker:public QObject{
public slots:
    void doWork(const QString &parameter) {
        /*耗时或阻塞操作*/
    }
};
//主线程类，控制子线程开始/结束
class Controller: public QObject{
	 //创建一个子线程对象
    QThread workerThread;
public:
    Controller() {
        Worker *worker = new Worker;
        //将worker对象移动到子线程中
        worker->moveToThread(&workerThread);       
        //当主线程对象发送operate信号，worker的
        //槽函数doWork将在子线程中执行
        connect(this, &Controller::operate, 
        				worker, &Worker::doWork);
   	  //开启线程
        workerThread.start();
    }
signals:
    void operate(const QString &);
};

2）方法2：继承QThread，重写run函数
//子线程类
class WorkerThread:public QThread{
protected:
    //线程入口函数
    void run()[virtual]{
        /*耗时或阻塞的操作*/
    }
};
//创建子线程对象
WorkerThread *workerThread 
	= new WorkerThread(this);
//开启线程，run将在子线程中执行
workerThread->start();
--------------------------------------
2 线程相关操作函数
1）开启线程//类似pthread_create
  	void QThread::start();
  注：重写的run函数将在独立线程中被执行
2）获取线程句柄(ID)//类似pthread_self
	QThread::currentThreadID()
3）线程终止（正常退出）//类似pthread_exit
	QThread::exit();
	QThread::quit()[slot];
4）线程取消（异常退出）//类似pthread_cancel
	QThread::terminate()
	-----------------
	注：线程取消有风险！！
	void run(){
		..
		new 内存
		..
		被终止，delete执行不到，内存泄漏
		..
		delete 内存
		..
	}
	---------------------
	void run(){
		..
		加锁
		..
		临时资源
		..
		被终止，解锁执行不到，死锁
		..
		解锁
		..
	}
	
5）线程等待//类似pthread_join
	QThread::wait()
	
6）设置线程是否允许被取消
//类似pthread_setcancelstate
   QThread::setTerminationEnable(bool)
   --------------------
   void run(){
   	...
   	setTerminationEnable(false)
   	//关键代码：数据库访问/动态资源/临时资源
   	setTerminationEnable(true)
   	...
   }
 案例：多线程打印消息
 工程名：Thread
 类名：ThreadDialog  
 
----------
二 线程同步
1 互斥锁(量) QMutex
加锁：lock()/tryLock()
解锁：unlock()
	int g_num = 0;
	QMutex mutex;
	void ThreadA::run(){
		mutex.lock();
		g_num++;
		mutex.unlock();
	}
	void ThreadB::run(){
		mutex.lock();
		g_num++;
		mutex.unlock();
	}
	
2 读写锁 QReadWriteLock
读锁：lockForRead()
写锁：lockForWrite()
解决：unlock()

QReadWriteLock lock;
void ReaderThread::run()//读操作线程
{
    ...
    lock.lockForRead();
    read_file();
    lock.unlock();
    ...
}
void WriterThread::run()//写操作线程
{
    ...
    lock.lockForWrite();
    write_file();
    lock.unlock();
    ...
}
3 信号量 QSemaphore
获取信号量(P):acquire(-1)
释放信号量(V):release(+1)
//初始化信号量为5，表示有5个共享资源
QSemaphore sem(5);//sem.available() == 5
//获取3个资源，剩余两个可用资源
sem.acquire(3);//sem.available() == 2
//再获取2个资源，剩余0可用
sem.acquire(2);// sem.available() == 0
//释放5个资源，剩余5个可用资源
sem.release(5);// sem.available() == 5
//又分配5个新的资源，剩余10个可用资源
sem.release(5);// sem.available() == 10
//尝试获取1个资源，成功，剩余9个可用资源
sem.tryAcquire(1);//sem.available()== 9,true
//尝试获取250个资源，失败，剩余9个可用资源
sem.tryAcquire(250);//sem.available()==9,false

4 条件变量 QWaitCondition

========================
三 复习网络编程
1 网络层次(OSI七层)
应用层 HTTP、ftp、smtp、dns...
表示层
会话层
传输层 tcp、udp
网络层 ipv4/ipv6
数据链路层
物理层

2 IP地址：标记网络中唯一的计算机
ipv4：4个字节
ipv6：16个字节

3 端口号(unsigned short)
0~~65535

4 Socket编程模型
4.1 TCP编程
1）服务器
--》创建套接字 socket()
--》准备服务器地址 struct sockaddr_in{ip/port}
--》绑定套接字和地址 bind()
--》监听 listen()
while(1){
  --》等待客户端连接请求 accept(),返回和客户端通信的套接字
  --》*创建子进程/子线程
}
--》在子进程/子线程和客户端通信
	read()/write()
	recv()/send()
--》关闭 close()

2）客户端
--》创建和服务器通信套接字 socket()
--》准备服务器地址 struct sockaddr_in{ip/port}
--》和服务器连接 connect()
--》和服务器通信
	read()/write()
	recv()/send()
--》关闭close()

4.2 UDP编程
1）服务器
--》创建和服务器通信套接字 socket()
--》准备服务器地址 struct sockaddr_in{ip/port}
--》绑定套接字和地址 bind()
--》通信
	recvfrom()/sendto()
--》关闭 close

2）客户端
--》创建和服务器通信套接字 socket()
--》准备服务器地址 struct sockaddr_in{ip/port}
--》通信
	recvfrom()/sendto()
--》关闭 close()

QT网络编程相关类：
1）QHostAddress //IP地址
2）QAbstractSocket //套接字基类
3）QUdpSocket //UDP套接字
4）QTcpSocket //TCP套接字
5）QTcpServer //TCP服务器

